name: Build and Release PostgreSQL with PostGIS and pgRouting

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

on:
  push:
    branches:
      - release
  workflow_dispatch:

env:
  POSTGIS_VERSION: 3.4.4
  PGROUTING_VERSION: 3.6.2
  PGVECTOR_VERSION: 0.8.0

jobs:
  build-macos:
    strategy:
      matrix:
        pg_version: ["16.9", "17.4"]
        os:
          - macos-14-large
          - macos-14-xlarge
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: scripts
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Decode and import the certificate
        run: |
          # Decode the base64-encoded certificate and save it as a .p12 file
          echo "${{ secrets.CERTIFICATE_P12_BASE64 }}" | base64 --decode > certificate.p12

          # Import the .p12 certificate into the macOS keychain
          security create-keychain -p "temp-password" build.keychain
          security import certificate.p12 -k build.keychain -P "${{ secrets.CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign

          # Set the keychain as default and unlock it
          security list-keychains -s build.keychain
          security unlock-keychain -p "temp-password" build.keychain

          # Set keychain settings to prevent it from locking automatically
          security set-keychain-settings build.keychain

          # Pre-authorize codesign to access the certificate
          security set-key-partition-list -S apple-tool:,apple: -s -k "temp-password" build.keychain

          echo "SIGN_IDENTITY=${{ secrets.SIGN_IDENTITY }}" >> $GITHUB_ENV
          echo "APPLE_ID=${{ secrets.APPLE_ID }}" >> $GITHUB_ENV
          echo "APPLE_APP_SPECIFIC_PASSWORD=${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}" >> $GITHUB_ENV
          echo "APPLE_TEAM_ID=${{ secrets.APPLE_TEAM_ID }}" >> $GITHUB_ENV

      - name: Build PostgreSQL, PostGIS, pgvector, and dependencies
        id: build_postgres
        run: |
          ./build-postgres-darwin.sh -v ${{ matrix.pg_version }} -g $POSTGIS_VERSION -r $PGROUTING_VERSION -s $PGVECTOR_VERSION

          ARCH=$(arch)
          echo "ARCH=$ARCH" >> $GITHUB_OUTPUT
          echo "FILENAME=postgresql-${{ matrix.pg_version }}-darwin-$ARCH.zip" >> $GITHUB_OUTPUT

      - name: Prepare Release Assets
        run: |
          mkdir -p release
          cp bundle/postgres-macos.zip "release/${{ steps.build_postgres.outputs.FILENAME }}"
          ls -l release

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: postgresql-macos-${{ matrix.pg_version }}-${{ steps.build_postgres.outputs.ARCH }}
          path: ${{ github.workspace }}/scripts/release/${{ steps.build_postgres.outputs.FILENAME }}

  build-linux:
    strategy:
      matrix:
        arch: [amd64, arm64v8]
        pg_version: ["16.9", "17.4"]
        include:
          - arch: amd64
            runs_on: ubuntu-22.04
          - arch: arm64v8
            runs_on: ubuntu-22.04-arm

    runs-on: ${{ matrix.runs_on }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build PostgreSQL, PostGIS, pgvector, and dependencies
        run: |
          ARCH_NAME=${{ matrix.arch }} PG_VERSION=${{ matrix.pg_version }} ./build_and_release.sh
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: postgresql-linux-${{ matrix.pg_version }}-${{ matrix.arch }}
          path: release/postgresql-${{ matrix.pg_version }}-linux-${{ matrix.arch }}.txz

  publish-release:
    name: Publish combined release
    needs: [ build-linux, build-macos ]
    strategy:
      matrix:
        pg_version: ["16.9", "17.4"]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: release

      - name: List downloaded artifacts
        run: |
          find release -type f -maxdepth 2 -print

      - name: Create unified GitHub Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          VERSION="${{ matrix.pg_version }}"
          DATE=$(date +%Y%m%d)
          RELEASE_NAME="${VERSION}-${DATE}"
          # Flatten nested artifact directories into release/
          mkdir -p out
          find release -type f \( -name "postgresql-${{ matrix.pg_version }}-*.zip" -o -name "postgresql-${{ matrix.pg_version }}-*.txz" \) -exec cp {} out/ \;
          # Generate SHA256 sums
          (cd out && sha256sum *) > out/SHA256SUMS.txt || true
          echo "Assets to upload:" && ls -l out
          # Remove existing release if present
          gh release view "$RELEASE_NAME" >/dev/null 2>&1 && gh release delete "$RELEASE_NAME" -y || true
          # Create release with all assets
          gh release create "$RELEASE_NAME" out/* --title "$RELEASE_NAME" --notes-file out/SHA256SUMS.txt
